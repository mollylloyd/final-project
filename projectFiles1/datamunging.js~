var myJson = {};

queue()
    .defer(d3.json, "world-50m.json")
    .defer(d3.csv, "countryCodes.csv")
    .defer(d3.csv, "gdpCapita.csv")
    .await(ready);

function ready(error,world,codes,gdpCap) {
    //console.log(world.objects.countries.geometries);
    //console.log(codes);
    //console.log(gdpCap[0]);

   

	myJson.arcs = world.arcs;
	myJson.type = "Topology"
	myJson.objects = {"gdp": {"type":"GeometryCollection","geometries":[]},"pop":{"type":"GeometryCollection","geometries":[]}}

	countries = world.objects.countries.geometries;
	
	countries.forEach(function(d,k){
		codes.forEach(function(e,j){
			//if (i==1 && j==1) console.log(e.code);	
			if (d.id == e.code) {
				//for(i=0;i<countries.length;i++){
					myJson.objects.gdp.geometries[k] = 
						{"arcs":countries[k].arcs, "id":d.id, "alpha":e.alpha3, "properties":{"country": e.name, "gdpGrowth":0,"pop":0,"gdpCap":0}};
					myJson.objects.pop.geometries[k] = 
						{"arcs":countries[k].arcs, "id":d.id, "alpha":e.alpha3, "properties":{"country": e.name, "gdpGrowth":0,"pop":0,"gdpCap":0}};
				//}
			}
		})
	});

    console.log(myJson);

	myJson.objects.gdp.geometries.forEach(function(d,i){
		gdpCap.forEach(function(e,j){
			if (d.alpha == e.CountryCode) {
				for (i=0;i<myJson.objects.gdp.geometries.length;i++){
					d.properties.gdpGrowth = +e.gdpGrowth2012;
					d.properties.pop = +e.population2012;
					d.properties.gdpCap = +e.gdpPerCap2012;
				}
			}
		})
	})


	myJson.objects.pop.geometries.forEach(function(d,i){
		gdpCap.forEach(function(e,j){
			if (d.alpha == e.CountryCode) {
				for (i=0;i<myJson.objects.gdp.geometries.length;i++){
					d.properties.gdpGrowth = +e.gdpGrowth2012;
					d.properties.pop = +e.population2012;
					d.properties.gdpCap = +e.gdpPerCap2012;
				}
			}
		})
	})
saveToFile(myJson,"hexData.json")
console.log(myJson);
};

    var saveToFile = function(object, filename){
       
    var blob, blobText;
        blobText = [JSON.stringify(object)];
        blob = new Blob(blobText, {
            type: "text/plain;charset=utf-8"
        });
        saveAs(blob, filename);

    }


